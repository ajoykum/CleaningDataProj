format(d1,%D)
format(d1,%d)
format(d1,"%D")
format(d1,"%d")
format(d1,c("%d","%a")
)
paste0(format(d1,c("%d","%a"))
)
format(d1,c("%d","%a",%b))
format(d1,"%d","%a",%b)
format(d1,"%d","%a","%b")
format(d1,"%d%a%b")
format(d1,"%d %a %b")
format(d1,"%d th %b which is a %a")
format(d1,"%dth %b which is a %a")
as.Date("06091979")
as.Date("06/09/1979")
as.Date("30JUN2017")
as.Date("30Jun2017")
as.Date("30 Jun 2017")
as.Date("30jun2017")
as.Date("30jun2017","%d%a%b")
as.Date("30jun2017","%d%b%y")
as.Date("21apr1979","%d%b%y")
as.Date("21apr1979","%d%b%Y")
library(lubridate)
ymd("79jun21")
ymd("791221")
ymd("791231")
ymd("791131")
ymd("011129")
ymd("501129")
ymd("451129")
ymd("751129")
ymd("651129")
ymd("701129")
smh("30:30:12")
ymd_smh("20110609 30:30:12")
ymd_hms("20110609 23:30:12")
ymd_hms("20110609 23:30:12", tz = "IST")
ymd_hms("20110609 23:30:12", tz = "Indian]")
ymd_hms("20110609 23:30:12", tz = "Indian")
ymd_hms("20110609 23:30:12", tz = "India/Mumbai")
?Sys.timezone
library("swirl")
rm(list=ls())
swirl()
Sys.getlocale("LC_Time")
Sys.getlocale("LC_ALL")
Sys.getlocale("LC_TIME")
library(lubridate)
help(package = lubridate)
today()
this_day<-today()
print(this_day)
year(this_day)
wday(this_day)
wday(this_day,label = TRUE)
this_moment <- now()
this_moment
second(this_moment)
ymd("1980-05-17")
my_date<-ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("1920012")
ymd("192012")
ymd("1920/1/2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment,hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment<-update(this_moment,hour = 0, minute = 29)
this_moment<-update(this_moment,hours = 0, minutes =30, seconds = 30)
this_moment
nyc<-now()
nyc<-now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart,hours = 17, minutes = 34)
depart
arrive <- depart + hours(15) + minutes(30)
arrive <- depart + hours(15) + minutes(50)
?with_tz
with_tz(arrive,tzone = "Asia/Hong_Kong")
with_tz(arrive,tz = "Asia/Hong_Kong")
with_tz(arrive,"Asia/Hong_Kong")
arrive<-with_tz(arrive,"Asia/Hong_Kong")
arrive
last_time = mdy("June 17, 2008",tz = "Singapore")
last_time <- mdy("June 17, 2008",tz = "Singapore")
last_time
?interval
how_long <- interval(last_time,arrive)
as.period(how_long)
stopwatch()
conn<-"https://d396qusza40orc.cloudfront.net/getdata%2Fproectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(url = conn, destfile = "uci.zip",mode = "wb")
download.file(conn,"ucihar.zip",mode="wb")
pp <- getURLContent(conn, verbose = TRUE, useragent = getOption("HTTPUserAgent"))
??getURLContent
setInternet2(use = NA)
?setInternet2
con<-"https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(con,"uci.char",mode = "w",cacheOK = TRUE)
rm(c(conn,con))
rm(c("conn","con"))
rm(conn)
rm(con)
con <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(con,"uci.zip",mode = "w",cacheOK = TRUE)
if(!file.exists("./pro")){dir.create("./pro")}
setwd("./pro")
con <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(con,"uci.zip",mode = "w",cacheOK = TRUE)
## check and print if the file was downloaded.
if (file.exists("uci.zip")){ print("file downloaded sucessfully") }
## Unzip the file
unzip(zipfile = "uci.zip",overwrite = TRUE)
if(!file.exists("./pro")){dir.create("./pro")}
setwd("./pro")
con <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(con,"uci.zip",mode = "wb",cacheOK = TRUE)
## check and print if the file was downloaded.
if (file.exists("uci.zip")){ print("file downloaded sucessfully") }
## Unzip the file
unzip(zipfile = "uci.zip",overwrite = TRUE)
setwd("./UCI HAR Dataset/test")
## set a variable as a widths delimiter to read the fixed width txt file as a dataset
wid<-rep(16,561)
## create a data frame to read the text file which has test data set
teds <- read.fwf(file = "X_test.txt", widths = wid,header = FALSE)
## create a dataframe to read the activity code for each of the observation
tedsy <- read.fwf(file = "y_test.txt",widths = 2, header = FALSE)
## create a data frame to read the text file which has subject's id
tedsub <- read.fwf(file = "subject_test.txt", widths = 2, header = FALSE)
## insert a column in test data frame to include activity code
teds$actcode<-tedsy$V1
## insert a column to identify the row with subject id / participant
teds$participant<-tedsub$V1
## Move to parent directory
setwd('..')
## Read the text file which has training data set
trds <- read.fwf(file = "X_train.txt", widths = wid,header = FALSE)
## Read the text file which has training data set activity code
trdsy <- read.fwf(file = "y_train.txt",widths = 2, header = FALSE)
## Read the text file which has training subject / participant code
trdsub <- read.fwf(file = "subject_train.txt",widths = 2, header = FALSE)
## append training activity labels and participants with training data set
trds$actcode <- trdsy$V1
trds$particpant <- trdsub$V1
## move the working directory to a level up
setwd('..')
getwd()
getwd()
setwd(""C:/Users/137449/Google Drive/RP/GettingCleaningData/Project")
setwd(C:/Users/137449/Google Drive/RP/GettingCleaningData/Project")
setwd("C:/Users/137449/Google Drive/RP/GettingCleaningData/Project")
getwd()
rm(list = ls())
if(!file.exists("./pro")){dir.create("./pro")}
setwd("./pro")
con <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(con,"uci.zip",mode = "wb",cacheOK = TRUE)
## check and print if the file was downloaded.
if (file.exists("uci.zip")){ print("file downloaded sucessfully") }
## Unzip the file
unzip(zipfile = "uci.zip",overwrite = TRUE)
## set the working directory to the training folder
setwd("./UCI HAR Dataset/test")
## set a variable as a widths delimiter to read the fixed width txt file as a dataset
wid<-rep(16,561)
## create a data frame to read the text file which has test data set
teds <- read.fwf(file = "X_test.txt", widths = wid,header = FALSE)
## create a dataframe to read the activity code for each of the observation
tedsy <- read.fwf(file = "y_test.txt",widths = 2, header = FALSE)
## create a data frame to read the text file which has subject's id
tedsub <- read.fwf(file = "subject_test.txt", widths = 2, header = FALSE)
## insert a column in test data frame to include activity code
teds$actcode<-tedsy$V1
## insert a column to identify the row with subject id / participant
teds$participant<-tedsub$V1
## Move to parent directory
setwd('..')
getwd()
trds <- read.fwf(file = "./train/X_train.txt", widths = wid,header = FALSE)
trdsy <- read.fwf(file = "./train/y_train.txt",widths = 2, header = FALSE)
trdsub <- read.fwf(file = "./train/subject_train.txt",widths = 2, header = FALSE)
trds$actcode <- trdsy$V1
trds$particpant <- trdsub$V1
## Features table has the name of all the columns. Ingest the column names of the 561 features available in features.txt
feat<-read.table(file = 'features.txt',header = FALSE, sep = ' ',stringsAsFactors = FALSE)
## assigning column names to train data set for the first 561 features
colnames(trds)<-feat[[2]]
## assigning column names for the activity code and subject code
colnames(trds)[562]<-as.character("activitycode")
colnames(trds)[563]<-as.character("subjectcode")
## assigning column names to test data set for the first 561 features
colnames(teds)<-feat[[2]]
## assigning column names for the activity code and subject code
colnames(teds)[562]<-as.character("activitycode")
colnames(teds)[563]<-as.character("subjectcode")
## vertically merge the two datasets resulting in a new data set
comb <- rbind.data.frame(trds,teds)
comb1 <- comb[,grep("mean[^F]|std",colnames(comb))]
## add activity code and subject code to the shortened table
comb1$activitycode<-as.factor(comb$activitycode)
comb1$subjectcode<-as.factor(comb$subjectcode)
## reading activity description from activity_labels file
actlabel<-read.table(file = "activity_labels.txt", header = FALSE, sep = " ",col.names = c("activitycode","activitydescription"))
## merging activity lables with combined data set by id to get activity description
comb1<-merge(x = comb1,y = actlabel,by.x = "activitycode",by.y = "activitycode",all = TRUE)
## We have a data set which is merged, has activity description, has descriptive data values and has only Mean and SD variables
##creating a independent tidy data set with the average of each variable for each activity and each subject.
newd<-aggregate(x = comb1[2:67],by = comb1[c("activitydescription","subjectcode")], FUN = mean)
View(newd)
names(newd)
names(newd)
gsub(pattern = "tbody",replacement = "Time Body",x = colnames(newd))
gsub(pattern = "tBody",replacement = "Time Body",x = colnames(newd))
colnames(newd)<-gsub(pattern = "Acc",replacement = "Acceleration",x = colnames(newd))
names(newd)
colnames(newd)<-gsub(pattern = "Mag",replacement = " Magnitude",x = colnames(newd))
names(newd)
colnames(newd)<-gsub(pattern = "tBody",replacement = "Time Series Body",x = colnames(newd))
names(newd)
colnames(newd)<-gsub(pattern = "tGravity",replacement = "Time Series Gravity",x = colnames(newd))
names(newd)
colnames(newd)<-gsub(pattern = "fBody",replacement = "Frequency Series Body",x = colnames(newd))
names(newd)
colnames(newd)<-gsub(pattern = "BodyBody",replacement = "Body ",x = colnames(newd))
names(newd)
colnames(newd)<-gsub(pattern = "BodyGyro",replacement = "Body Gyro",x = colnames(newd))
names(newd)
colnames(newd)<-gsub(pattern = "BodyAcceleration",replacement = "Body Acceleration",x = colnames(newd))
names(newd)
View(newd)
write.csv(x = newd,file = "OutputDataset.csv",append = TRUE,sep = "\t",eol = "\n")
getwd()
write.csv(x = newd,file = "OutputDataset.csv")
## Check if pro director exist
## Create the directory if it does not already exist
## Set the working directory to the newly created dir
## create conn variable to store the url
## download the file and store it locally as UCI.zip
if(!file.exists("./pro")){dir.create("./pro")}
setwd("./pro")
con <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
download.file(con,"uci.zip",mode = "wb",cacheOK = TRUE)
## check and print if the file was downloaded.
if (file.exists("uci.zip")){ print("file downloaded sucessfully") }
## Unzip the file
unzip(zipfile = "uci.zip",overwrite = TRUE)
## set the working directory to the training folder
setwd("./UCI HAR Dataset/test")
## set a variable as a widths delimiter to read the fixed width txt file as a dataset
wid<-rep(16,561)
## create a data frame to read the text file which has test data set
teds <- read.fwf(file = "X_test.txt", widths = wid,header = FALSE)
## create a dataframe to read the activity code for each of the observation
tedsy <- read.fwf(file = "y_test.txt",widths = 2, header = FALSE)
## create a data frame to read the text file which has subject's id
tedsub <- read.fwf(file = "subject_test.txt", widths = 2, header = FALSE)
## insert a column in test data frame to include activity code
teds$actcode<-tedsy$V1
## insert a column to identify the row with subject id / participant
teds$participant<-tedsub$V1
## Move to parent directory
setwd('..')
getwd()
## Read the text file which has training data set
trds <- read.fwf(file = "./train/X_train.txt", widths = wid,header = FALSE)
## Read the text file which has training data set activity code
trdsy <- read.fwf(file = "./train/y_train.txt",widths = 2, header = FALSE)
## Read the text file which has training subject / participant code
trdsub <- read.fwf(file = "./train/subject_train.txt",widths = 2, header = FALSE)
## append training activity labels and participants with training data set
trds$actcode <- trdsy$V1
trds$particpant <- trdsub$V1
## Features table has the name of all the columns. Ingest the column names of the 561 features available in features.txt
feat<-read.table(file = 'features.txt',header = FALSE, sep = ' ',stringsAsFactors = FALSE)
## assigning column names to train data set for the first 561 features
colnames(trds)<-feat[[2]]
## assigning column names for the activity code and subject code
colnames(trds)[562]<-as.character("activitycode")
colnames(trds)[563]<-as.character("subjectcode")
## assigning column names to test data set for the first 561 features
colnames(teds)<-feat[[2]]
## assigning column names for the activity code and subject code
colnames(teds)[562]<-as.character("activitycode")
colnames(teds)[563]<-as.character("subjectcode")
## vertically merge the two datasets resulting in a new data set
comb <- rbind.data.frame(trds,teds)
## Using grep find all the column names which has either a 'mean' or 'std' in the column names. Create a new dataset only with this
## Using [^F] to avoid pulling the meanFreq variables which are present in the dataset
comb1 <- comb[,grep("mean[^F]|std",colnames(comb))]
## add activity code and subject code to the shortened table
comb1$activitycode<-as.factor(comb$activitycode)
comb1$subjectcode<-as.factor(comb$subjectcode)
## reading activity description from activity_labels file
actlabel<-read.table(file = "activity_labels.txt", header = FALSE, sep = " ",col.names = c("activitycode","activitydescription"))
## merging activity lables with combined data set by id to get activity description
comb1<-merge(x = comb1,y = actlabel,by.x = "activitycode",by.y = "activitycode",all = TRUE)
## We have a data set which is merged, has activity description, has descriptive data values and has only Mean and SD variables
##creating a independent tidy data set with the average of each variable for each activity and each subject.
newd<-aggregate(x = comb1[2:67],by = comb1[c("activitydescription","subjectcode")], FUN = mean)
## creating descriptive names for columns
## replacing Acc with Acceleration
colnames(newd)<-gsub(pattern = "Acc",replacement = "Acceleration",x = colnames(newd))
## replacing Mag with tbody and tgravity with Time series Body
colnames(newd)<-gsub(pattern = "tBody",replacement = "Time Series Body",x = colnames(newd))
colnames(newd)<-gsub(pattern = "tGravity",replacement = "Time Series Gravity",x = colnames(newd))
colnames(newd)<-gsub(pattern = "fBody",replacement = "Frequency Series Body",x = colnames(newd))
colnames(newd)<-gsub(pattern = "BodyBody",replacement = "Body ",x = colnames(newd))
colnames(newd)<-gsub(pattern = "BodyGyro",replacement = "Body Gyro",x = colnames(newd))
colnames(newd)<-gsub(pattern = "BodyAcceleration",replacement = "Body Acceleration",x = colnames(newd))
# write the content of Output file in OutputDataset.csv
write.csv(x = newd,file = "OutputDataset.csv")
getwd()
getwd()
setwd("C:/Users/137449/Google Drive/RP/GettingCleaningData/")
message("this will take longer")
## Check if pro director exist
## Create the directory if it does not already exist
## Set the working directory to the newly created dir
## create conn variable to store the url
## download the file and store it locally as UCI.zip
library(stats)
library(dplyr)
if(!file.exists("./pro")){dir.create("./pro")}
setwd("./pro")
con <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
message("Attempting to download a 59MB file..")
download.file(con,"uci.zip",mode = "wb",cacheOK = TRUE)
## check and print if the file was downloaded.
if (file.exists("uci.zip")){ print("file downloaded sucessfully") }
## Unzip the file
message("unzipping the downloaded file")
unzip(zipfile = "uci.zip",overwrite = TRUE)
## set the working directory to the training folder
setwd("./UCI HAR Dataset/test")
## set a variable as a widths delimiter to read the fixed width txt file as a dataset
wid<-rep(16,561)
## create a data frame to read the text file which has test data set
message("reading data file.. typically takes some time")
teds <- read.fwf(file = "X_test.txt", widths = wid,header = FALSE)
## create a dataframe to read the activity code for each of the observation
tedsy <- read.fwf(file = "y_test.txt",widths = 2, header = FALSE)
## create a data frame to read the text file which has subject's id
tedsub <- read.fwf(file = "subject_test.txt", widths = 2, header = FALSE)
## insert a column in test data frame to include activity code
teds$actcode<-tedsy$V1
## insert a column to identify the row with subject id / participant
teds$participant<-tedsub$V1
## Move to parent directory
setwd('..')
getwd()
message("Another big file to read.. ")
## Read the text file which has training data set
trds <- read.fwf(file = "./train/X_train.txt", widths = wid,header = FALSE)
## Read the text file which has training data set activity code
trdsy <- read.fwf(file = "./train/y_train.txt",widths = 2, header = FALSE)
## Read the text file which has training subject / participant code
trdsub <- read.fwf(file = "./train/subject_train.txt",widths = 2, header = FALSE)
## append training activity labels and participants with training data set
trds$actcode <- trdsy$V1
trds$particpant <- trdsub$V1
## Features table has the name of all the columns. Ingest the column names of the 561 features available in features.txt
feat<-read.table(file = 'features.txt',header = FALSE, sep = ' ',stringsAsFactors = FALSE)
## assigning column names to train data set for the first 561 features
colnames(trds)<-feat[[2]]
## assigning column names for the activity code and subject code
colnames(trds)[562]<-as.character("activitycode")
colnames(trds)[563]<-as.character("subjectcode")
## assigning column names to test data set for the first 561 features
colnames(teds)<-feat[[2]]
## assigning column names for the activity code and subject code
colnames(teds)[562]<-as.character("activitycode")
colnames(teds)[563]<-as.character("subjectcode")
## vertically merge the two datasets resulting in a new data set
comb <- rbind.data.frame(trds,teds)
message("Merged the datafiles successfully")
## Using grep find all the column names which has either a 'mean' or 'std' in the column names. Create a new dataset only with this
## Using [^F] to avoid pulling the meanFreq variables which are present in the dataset
comb1 <- comb[,grep("mean[^F]|std",colnames(comb))]
## add activity code and subject code to the shortened table
comb1$activitycode<-as.factor(comb$activitycode)
comb1$subjectcode<-as.factor(comb$subjectcode)
message("Removed non-mean, non-std data columns")
## reading activity description from activity_labels file
actlabel<-read.table(file = "activity_labels.txt", header = FALSE, sep = " ",col.names = c("activitycode","activitydescription"))
## merging activity lables with combined data set by id to get activity description
comb1<-merge(x = comb1,y = actlabel,by.x = "activitycode",by.y = "activitycode",all = TRUE)
## We have a data set which is merged, has activity description, has descriptive data values and has only Mean and SD variables
message("We have added descriptity activity to dataset")
##creating a independent tidy data set with the average of each variable for each activity and each subject.
newd<-aggregate(x = comb1[2:67],by = comb1[c("activitydescription","subjectcode")], FUN = mean)
message("Created a new tiday dataset")
## creating descriptive names for columns
## replacing Acc with Acceleration
colnames(newd)<-gsub(pattern = "Acc",replacement = "Acceleration",x = colnames(newd))
## replacing Mag with tbody and tgravity with Time series Body
colnames(newd)<-gsub(pattern = "tBody",replacement = "Time Series Body",x = colnames(newd))
colnames(newd)<-gsub(pattern = "tGravity",replacement = "Time Series Gravity",x = colnames(newd))
colnames(newd)<-gsub(pattern = "fBody",replacement = "Frequency Series Body",x = colnames(newd))
colnames(newd)<-gsub(pattern = "BodyBody",replacement = "Body ",x = colnames(newd))
colnames(newd)<-gsub(pattern = "BodyGyro",replacement = "Body Gyro",x = colnames(newd))
colnames(newd)<-gsub(pattern = "BodyAcceleration",replacement = "Body Acceleration",x = colnames(newd))
# write the content of Output file in OutputDataset.csv
write.csv(x = newd,file = "OutputDataset.csv")
View(newd)
print("Created a new tiday dataset")
setwd("C:/Users/137449/Google Drive/RP/GettingCleaningData/")
library(stats)
library(dplyr)
## Check if pro director exist
## Create the directory if it does not already exist
## Set the working directory to the newly created dir
## create conn variable to store the url
## download the file and store it locally as UCI.zip
if(!file.exists("./pro")){dir.create("./pro")}
setwd("./pro")
con <- "https://d396qusza40orc.cloudfront.net/getdata%2Fprojectfiles%2FUCI%20HAR%20Dataset.zip"
print("Attempting to download a 59MB file..")
if(!file.exists("uci.zip"))
{
download.file(con,"uci.zip",mode = "wb",cacheOK = TRUE)
}
## check and print if the file was downloaded.
if (file.exists("uci.zip")){ print("file is available") }
## Unzip the file
print("unzipping the downloaded file")
unzip(zipfile = "uci.zip",overwrite = TRUE)
## set the working directory to the training folder
setwd("./UCI HAR Dataset/test")
## set a variable as a widths delimiter to read the fixed width txt file as a dataset
wid<-rep(16,561)
## create a data frame to read the text file which has test data set
print("reading data file.. typically takes some time")
teds <- read.fwf(file = "X_test.txt", widths = wid,header = FALSE)
## create a dataframe to read the activity code for each of the observation
tedsy <- read.fwf(file = "y_test.txt",widths = 2, header = FALSE)
## create a data frame to read the text file which has subject's id
tedsub <- read.fwf(file = "subject_test.txt", widths = 2, header = FALSE)
## insert a column in test data frame to include activity code
teds$actcode<-tedsy$V1
## insert a column to identify the row with subject id / participant
teds$participant<-tedsub$V1
## Move to parent directory
setwd('..')
getwd()
print("Another big file to read.. ")
## Read the text file which has training data set
trds <- read.fwf(file = "./train/X_train.txt", widths = wid,header = FALSE)
## Read the text file which has training data set activity code
trdsy <- read.fwf(file = "./train/y_train.txt",widths = 2, header = FALSE)
## Read the text file which has training subject / participant code
trdsub <- read.fwf(file = "./train/subject_train.txt",widths = 2, header = FALSE)
## append training activity labels and participants with training data set
trds$actcode <- trdsy$V1
trds$particpant <- trdsub$V1
## Features table has the name of all the columns. Ingest the column names of the 561 features available in features.txt
feat<-read.table(file = 'features.txt',header = FALSE, sep = ' ',stringsAsFactors = FALSE)
## assigning column names to train data set for the first 561 features
colnames(trds)<-feat[[2]]
## assigning column names for the activity code and subject code
colnames(trds)[562]<-as.character("activitycode")
colnames(trds)[563]<-as.character("subjectcode")
## assigning column names to test data set for the first 561 features
colnames(teds)<-feat[[2]]
## assigning column names for the activity code and subject code
colnames(teds)[562]<-as.character("activitycode")
colnames(teds)[563]<-as.character("subjectcode")
## vertically merge the two datasets resulting in a new data set
comb <- rbind.data.frame(trds,teds)
print("Merged the datafiles successfully")
## Using grep find all the column names which has either a 'mean' or 'std' in the column names. Create a new dataset only with this
## Using [^F] to avoid pulling the meanFreq variables which are present in the dataset
comb1 <- comb[,grep("mean[^F]|std",colnames(comb))]
## add activity code and subject code to the shortened table
comb1$activitycode<-as.factor(comb$activitycode)
comb1$subjectcode<-as.factor(comb$subjectcode)
print("Removed non-mean, non-std data columns")
## reading activity description from activity_labels file
actlabel<-read.table(file = "activity_labels.txt", header = FALSE, sep = " ",col.names = c("activitycode","activitydescription"))
## merging activity lables with combined data set by id to get activity description
comb1<-merge(x = comb1,y = actlabel,by.x = "activitycode",by.y = "activitycode",all = TRUE)
## We have a data set which is merged, has activity description, has descriptive data values and has only Mean and SD variables
print("We have added descriptity activity to dataset")
##creating a independent tidy data set with the average of each variable for each activity and each subject.
newd<-aggregate(x = comb1[2:67],by = comb1[c("activitydescription","subjectcode")], FUN = mean)
print("Created a new tiday dataset")
## creating descriptive names for columns
## replacing Acc with Acceleration
colnames(newd)<-gsub(pattern = "Acc",replacement = "Acceleration",x = colnames(newd))
## replacing Mag with tbody and tgravity with Time series Body
colnames(newd)<-gsub(pattern = "tBody",replacement = "Time Series Body",x = colnames(newd))
colnames(newd)<-gsub(pattern = "tGravity",replacement = "Time Series Gravity",x = colnames(newd))
colnames(newd)<-gsub(pattern = "fBody",replacement = "Frequency Series Body",x = colnames(newd))
colnames(newd)<-gsub(pattern = "BodyBody",replacement = "Body ",x = colnames(newd))
colnames(newd)<-gsub(pattern = "BodyGyro",replacement = "Body Gyro",x = colnames(newd))
colnames(newd)<-gsub(pattern = "BodyAcceleration",replacement = "Body Acceleration",x = colnames(newd))
# write the content of Output file in OutputDataset.csv
write.csv(x = newd,file = "OutputDataset.csv")
getwd()
